name: Create Release Draft

on:
  push:
  workflow_dispatch:

jobs:
  # linux-compat:
  #   name: Build Linux Compat (glibc 2.17-compatible)
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out build code
  #       uses: actions/checkout@v2

  #     - name: Check out nushell code
  #       uses: actions/checkout@v2
  #       with:
  #         repository: nushell/nushell
  #         path: nushell

  #     - name: Docker build
  #       run: docker build -t nushell-build .

  #     - name: Extract binaries
  #       run: |
  #         mkdir output
  #         docker container create --name nushell-build nushell-build
  #         docker cp nushell-build:/usr/src/nushell/bin/ ./
  #         mv bin/nu* output/
  #         docker cp nushell-build:/usr/src/nushell/README.build.txt output/
  #         docker cp nushell-build:/usr/src/nushell/LICENSE output/

  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: linux-compat
  #         path: output/*

  # linux:
  #   name: Build Linux
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/checkout@v2
  #       with:
  #         repository: nushell/nushell
  #         path: nushell
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: stable
  #         override: true

  #     - name: Install Clang Dependencies
  #       run: sudo apt-get install libxcb-composite0-dev pkg-config libssl-dev libx11-dev

  #     - name: Build
  #       run: |
  #         cd nushell
  #         cargo install --path . --root . --features=extra
  #         cd ..
  #         mkdir output
  #         cp nushell/bin/nu* output/
  #         cp nushell/README.build.txt output/README.txt
  #         cp nushell/LICENSE output/LICENSE

  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: linux
  #         path: output/*

  # macos:
  #   name: Build macOS
  #   runs-on: macos-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/checkout@v2
  #       with:
  #         repository: nushell/nushell
  #         path: nushell
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: stable
  #         override: true
  #     #- uses: Homebrew/actions/setup-homebrew@master 

  #     - name: Build
  #       run: |
  #         cd nushell
  #         cargo install --path . --root . --features=extra
  #         cd ..
  #         mkdir output
  #         cp nushell/bin/nu* output/
  #         cp nushell/README.build.txt output/README.txt
  #         cp nushell/LICENSE output/LICENSE
  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: macos
  #         path: output/*

  # windows:
  #   name: Build Windows
  #   runs-on: windows-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/checkout@v2
  #       with:
  #         repository: nushell/nushell
  #         path: nushell
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: stable
  #         override: true

  #     - name: Build
  #       run: |
  #         cd nushell
  #         cargo install --path . --root . --features=extra
  #         cd ..
  #         mkdir output

  #         Invoke-WebRequest -Uri "https://github.com/jftuga/less-Windows/releases/download/less-v562.0/less.exe" -OutFile "output\less.exe"
  #         Invoke-WebRequest -Uri "https://raw.githubusercontent.com/jftuga/less-Windows/master/LICENSE" -OutFile "output\LICENSE-for-less.txt"

  #         cp nushell\bin\nu* output\
  #         cp nushell\LICENSE output\
  #         cp nushell/README.build.txt output\README.txt

  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: windows
  #         path: output\*

  linux-compat:
    name: Build Linux Compat (glibc 2.17-compatible)
    runs-on: ubuntu-latest
    steps:
      - name: fake build
        run: |
          mkdir output
          cd output
          echo hello > linux-compat-file1
          echo hello > linux-compat-file2
          echo hello > linux-compat-file3

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: linux-compat
          path: output/*

  linux:
    name: Build Linux
    runs-on: ubuntu-latest
    steps:
      
      - name: fake build
        run: |
          mkdir output
          cd output
          echo hello > linux-file1
          echo hello > linux-file2
          echo hello > linux-file3

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: linux
          path: output/*

  macos:
    name: Build macOS
    runs-on: macos-latest
    steps:
      
      - name: fake build
        run: |
          mkdir output
          cd output
          echo hello > macos-file1
          echo hello > macos-file2
          echo hello > macos-file3
    
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: macos
          path: output/*

  windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - name: fake build
        run: |
          mkdir output
          cd output
          echo hello > windows-file1
          echo hello > windows-file2
          echo hello > windows-file3

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: windows
          path: output\*

  release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs:
      - linux-compat
      - linux
      - macos
      - windows
    steps:

      - name: Download Linux-Compat Artifacts
        uses: actions/download-artifact@v2
        with:
          name: linux-compat
          path: linux-compat

      - name: Download Linux Artifacts
        uses: actions/download-artifact@v2
        with:
          name: linux
          path: linux

      - name: Download macOS Artifacts
        uses: actions/download-artifact@v2
        with:
          name: macos
          path: macos

      - name: Download Windows Artifacts
        uses: actions/download-artifact@v2
        with:
          name: windows
          path: windows

      - name: Prep Artifacts
        run: |
          chmod 755 linux-compat/*
          tar -zcvf linux-compat.tar.gz linux-compat

          chmod 755 linux/*
          tar -zcvf linux.tar.gz linux

          chmod 755 macos/*
          zip -r macos.zip macos

          zip -r windows.zip windows
      
      - name: Release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: false
          title: "Latest Build"
          files: |
            *.zip
            *.tar.gz
